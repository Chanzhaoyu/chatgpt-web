apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    app: "{{MIC_NAME}}"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}"
    spec:
      imagePullSecrets:
        - name: {{MIC_REGISTRY}}
      containers:
      - name: "{{MIC_NAME}}"
        image: "{{MIC_IMAGE}}"
        env:
          - name: MIC_EXECUTION_ID
            value: "{{MIC_EXECUTION_ID}}"
          - name: "PORT"
            value: "{{MIC_CONTAINER_PORT}}"
        ports:
        - name: http
          containerPort: {{MIC_CONTAINER_PORT}}
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}"
spec:
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
  type: NodePort
  selector:
    app: "{{MIC_NAME}}"
---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v2beta2
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    microticaService: "{{MIC_NAME}}"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{MIC_NAME}}"
  minReplicas: {{MIC_AS_MIN_REPLICAS}}
  maxReplicas: {{MIC_AS_MAX_REPLICAS}}
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{MIC_AS_MEMORY_UTILIZATION}}
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{MIC_AS_CPU_UTILIZATION}}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: "{{MIC_DOMAIN_NAME}}"
  namespace: "{{MIC_NAMESPACE}}"
  labels:
    microticaService: "{{MIC_NAME}}"
spec:
  secretName: "{{MIC_DOMAIN_TLS}}"
  dnsNames:
  - "{{MIC_DOMAIN_NAME}}"
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{MIC_NAME}}"
  namespace: "{{MIC_NAMESPACE}}"
spec:
  ingressClassName: nginx
  rules:
    - host: "{{MIC_DOMAIN_NAME}}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{MIC_NAME}}"
                port:
                  number: 80
  tls:
    - hosts:
        - "{{MIC_DOMAIN_NAME}}"
      secretName: "{{MIC_DOMAIN_TLS}}"